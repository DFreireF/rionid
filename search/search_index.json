{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RionID (Ring-stored ion IDentification) Usage Guide","text":"<p><code>RionID</code> is a Python code that simulates the time-of-flight/revolution-frequency spectrum of particles stored in a storage ring. Here is a guide on how to use <code>RionID</code> (for more details please check dfreiref.github.io/rionid/):</p>"},{"location":"#code-structure","title":"Code Structure","text":"<p>The <code>RionID</code> code consists of three main modules:</p> <ol> <li> <p><code>prerionid</code>: Handles preprocessing of Schottky data and file monitoring.</p> <ul> <li><code>__main__.md</code>: Entry point for preprocessing tasks.</li> <li><code>datacrunch.md</code>: Multithreaded file processing system.</li> <li><code>e0018.md</code>: Batch processing of IQ files.</li> <li><code>psdata.md</code>: Schottky data processing.</li> <li><code>watcher.md</code>: Directory monitoring for file changes.</li> </ul> </li> <li> <p><code>rionid</code>: Core simulation and data handling logic.</p> <ul> <li><code>__main__.md</code>: Entry point for simulation tasks.</li> <li><code>creategui.md</code>: Visualization using ROOT.</li> <li><code>importdata.md</code>: Handles experimental data and simulations.</li> <li><code>inputtools.md</code>: Utility functions for file input/output.</li> <li><code>pypeaks.md</code>: Peak detection and fitting.</li> <li><code>pyqtgraphgui.md</code>: Visualization using PyQtGraph.</li> </ul> </li> <li> <p><code>rionidgui</code>: Graphical user interface for interacting with the simulation.</p> <ul> <li><code>__main__.md</code>: Entry point for the GUI.</li> <li><code>gui.md</code>: Main GUI window.</li> <li><code>gui_controller.md</code>: Manages the simulation workflow.</li> <li><code>parameter_gui.md</code>: GUI for configuring simulation parameters.</li> </ul> </li> </ol>"},{"location":"#installation","title":"Installation","text":"<ul> <li> <p>Download and install Barion from @Xaratustrah, LISEreader from @gwgwhc, and PyROOT.</p> </li> <li> <p>Download or clone the <code>RionID</code> repository:   <pre><code>git clone https://github.com/DFreireF/rionid.git\n</code></pre></p> </li> <li> <p>Then in the cloned directory:   <pre><code>pip install .\n</code></pre></p> </li> </ul>"},{"location":"#usage","title":"Usage","text":"<p>Navigate to the directory containing the <code>RionID</code> code in your terminal. Run <code>python __main__.py [arguments]</code>, replacing <code>[arguments]</code> with the desired arguments (detailed below).</p>"},{"location":"#arguments","title":"Arguments","text":"<p>The following arguments are available for use with <code>RionID</code>:</p>"},{"location":"#main-arguments","title":"Main Arguments","text":"<ul> <li><code>datafile</code> (required): Name of the input file with data. Can also be a list of files in a txt file.</li> <li><code>alphap</code>: Momentum compaction factor of the ring.</li> <li><code>refion</code>: Reference ion with format NucleonsNameChargestate := AAXX+CC. Example: 72Ge+35, 1H+1, 238U+92...</li> <li><code>filep</code>: Read list of particles to simulate. LISE file or something else.</li> </ul>"},{"location":"#secondary-arguments","title":"Secondary Arguments","text":"<ul> <li><code>harmonics</code>: Harmonics to simulate.</li> </ul>"},{"location":"#arguments-for-each-mode-exclusive","title":"Arguments for Each Mode (Exclusive)","text":"<ul> <li><code>brho</code>: Brho value of the reference nucleus at ESR (isochronous mode).</li> <li><code>kenergy</code>: Kinetic energy of reference nucleus at ESR (isochronous mode).</li> <li><code>gamma</code>: Lorentz factor gamma of the reference particle.</li> <li><code>fref</code>: Revolution frequency of the reference particle (standard mode).</li> </ul>"},{"location":"#arguments-for-visualization","title":"Arguments for Visualization","text":"<ul> <li><code>ndivs</code>: Number of divisions in the display.</li> <li><code>amplitude</code>: Display of SRF data options. 0 -&gt; constant height, else -&gt; scaled.</li> </ul>"},{"location":"#actions","title":"Actions","text":"<ul> <li><code>log</code>: Set the logging level.</li> <li><code>show</code>: Show display. If not, save root file and close display.</li> <li><code>outdir</code>: Output directory.</li> <li><code>correct</code>: Correct simulated spectrum following a polynomial fit with parameters given here.</li> </ul>"},{"location":"#example-usage-dummy-example","title":"Example Usage: Dummy example","text":"<pre><code>python -m rionid datafile.txt -f 11.2452 -r 209Bi+83 -psim datafile.psim -b 5.5 -d 8 -am 1 -s -o output_folder -c 1 2 3\n</code></pre> <p>This command would run <code>RionID</code> on the <code>datafile.txt</code> input file, using the standard mode with a <code>reference frequency</code> of 11.2452, a <code>reference ion</code> of <code>209Bi+83</code>, a particle input file of <code>datafile.psim</code>, a <code>brho</code> value of <code>5.5</code>, and displaying the data with <code>8 divisions</code>, <code>scaled amplitude</code>, and showing the display. The output files would be saved in the <code>output_folder</code> directory, and the <code>simulated spectrum</code> would be <code>corrected</code> using the polynomial fit parameters 1, 2, and 3.</p>"},{"location":"#tutorial","title":"Tutorial","text":"<p>Tutorial for introducing yourself to Schottky data analysis by G. Hudson-Chang @gwgwhc.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>We acknowledge Dr. RuiJiu Chen (@chenruijiu) for providing a C++ code for the simulation of time-of-flight, which we used as inspiration for the backbone of this code. We acknowledge Dr. Shahab Sanjari (@xaratustrah) for guiding our software coding, especially in the initial stages.</p>"},{"location":"prerionid/__main__/","title":"PreRionID Main Module","text":"<p>The <code>__main__.py</code> module in the <code>prerionid</code> package serves as the entry point for processing Schottky data files. It provides functionality to analyze IQ data, generate spectrums, and save results in <code>.csv</code> or <code>.npz</code> formats. The module supports batch processing of multiple files and offers various options for customization.</p>"},{"location":"prerionid/__main__/#functions","title":"Functions","text":""},{"location":"prerionid/__main__/#write_spectrum_to_csvfreq-power-filename-center0-outnone","title":"<code>write_spectrum_to_csv(freq, power, filename, center=0, out=None)</code>","text":"<p>Writes the frequency and power spectrum data to a <code>.csv</code> file.</p>"},{"location":"prerionid/__main__/#parameters","title":"Parameters:","text":"<ul> <li><code>freq</code> (array): Frequency data.</li> <li><code>power</code> (array): Power data.</li> <li><code>filename</code> (str): Name of the input file.</li> <li><code>center</code> (float, optional): Center frequency (default: <code>0</code>).</li> <li><code>out</code> (str, optional): Output directory.</li> </ul>"},{"location":"prerionid/__main__/#workflow","title":"Workflow:","text":"<ol> <li>Combines frequency, power, and dBm values into a single array.</li> <li>Saves the data to a <code>.csv</code> file with a timestamped filename.</li> </ol>"},{"location":"prerionid/__main__/#read_masterfilemaster_filename","title":"<code>read_masterfile(master_filename)</code>","text":"<p>Reads a list of filenames from a master file.</p>"},{"location":"prerionid/__main__/#parameters_1","title":"Parameters:","text":"<ul> <li><code>master_filename</code> (str): Path to the master file.</li> </ul>"},{"location":"prerionid/__main__/#returns","title":"Returns:","text":"<ul> <li><code>list</code>: List of filenames.</li> </ul>"},{"location":"prerionid/__main__/#create_exp_spectrum_csvfilename-time-skip-binning-outnone-fftnone","title":"<code>create_exp_spectrum_csv(filename, time, skip, binning, out=None, fft=None)</code>","text":"<p>Processes a single file and saves the spectrum data as a <code>.csv</code> file.</p>"},{"location":"prerionid/__main__/#parameters_2","title":"Parameters:","text":"<ul> <li><code>filename</code> (str): Name of the input file.</li> <li><code>time</code> (float): Duration of the analysis (in seconds).</li> <li><code>skip</code> (float): Time to skip at the beginning of the file (in seconds).</li> <li><code>binning</code> (int): Number of frequency bins.</li> <li><code>out</code> (str, optional): Output directory.</li> <li><code>fft</code> (str, optional): FFT method to use.</li> </ul>"},{"location":"prerionid/__main__/#create_exp_spectrum_npzfilename-time-skip-binning-outnone-fftnone","title":"<code>create_exp_spectrum_npz(filename, time, skip, binning, out=None, fft=None)</code>","text":"<p>Processes a single file and saves the spectrum data as a <code>.npz</code> file.</p>"},{"location":"prerionid/__main__/#parameters_3","title":"Parameters:","text":"<ul> <li><code>filename</code> (str): Name of the input file.</li> <li><code>time</code> (float): Duration of the analysis (in seconds).</li> <li><code>skip</code> (float): Time to skip at the beginning of the file (in seconds).</li> <li><code>binning</code> (int): Number of frequency bins.</li> <li><code>out</code> (str, optional): Output directory.</li> <li><code>fft</code> (str, optional): FFT method to use.</li> </ul>"},{"location":"prerionid/__main__/#main","title":"<code>main()</code>","text":"<p>Main function to parse command-line arguments and process files.</p>"},{"location":"prerionid/__main__/#workflow_1","title":"Workflow:","text":"<ol> <li>Parses command-line arguments using <code>argparse</code>.</li> <li>Validates the output directory.</li> <li>Processes files:</li> <li>If a master file (<code>.txt</code>) is provided, processes all files listed in it.</li> <li>Otherwise, processes individual files.</li> <li>Saves the results in <code>.npz</code> format.</li> </ol>"},{"location":"prerionid/__main__/#command-line-interface","title":"Command-Line Interface","text":"<p>The <code>__main__.py</code> module can be executed as a standalone script. It accepts the following command-line arguments:</p>"},{"location":"prerionid/__main__/#arguments","title":"Arguments:","text":""},{"location":"prerionid/__main__/#main-arguments","title":"Main Arguments:","text":"<ul> <li><code>filename</code> (str): Name of the input file(s) or a master file containing a list of filenames.</li> </ul>"},{"location":"prerionid/__main__/#data-processing-arguments","title":"Data Processing Arguments:","text":"<ul> <li><code>-t</code>, <code>--time</code> (float): Duration of the analysis (in seconds).</li> <li><code>-s</code>, <code>--skip</code> (float): Time to skip at the beginning of the file (in seconds).</li> <li><code>-b</code>, <code>--binning</code> (int): Number of frequency bins (e.g., <code>1024</code>).</li> <li><code>-ts</code>, <code>--timesize</code> (float): Size of the time bin (in seconds).</li> <li><code>-m</code>, <code>--method</code> (str): FFT method to use (<code>npfft</code>, <code>fftw</code>, <code>welch</code>, <code>mtm</code>). Default: <code>npfft</code>.</li> </ul>"},{"location":"prerionid/__main__/#fancy-arguments","title":"Fancy Arguments:","text":"<ul> <li><code>-o</code>, <code>--outdir</code> (str): Output directory. Default: current working directory.</li> <li><code>-v</code>, <code>--verbose</code>: Increases output verbosity.</li> </ul>"},{"location":"prerionid/__main__/#example-usage","title":"Example Usage:","text":""},{"location":"prerionid/__main__/#process-a-single-file","title":"Process a Single File:","text":"<p>```bash python -m prerionid --filename data.iq --time 60 --skip 10 --binning 1024 --outdir ./output</p>"},{"location":"prerionid/datacrunch/","title":"DataCrunch Module","text":"<p>The <code>datacrunch.py</code> module provides a multithreaded system for processing <code>.tiq</code> files in a directory. It monitors the directory for new or modified files, processes them to generate spectrograms, and saves the results in various formats. The module also tracks processed files to avoid redundant processing.</p>"},{"location":"prerionid/datacrunch/#classes","title":"Classes","text":""},{"location":"prerionid/datacrunch/#watcher","title":"<code>Watcher</code>","text":"<p>The <code>Watcher</code> class monitors a directory for new or modified <code>.tiq</code> files and adds them to a processing queue.</p>"},{"location":"prerionid/datacrunch/#constructor-__init__self-directory-queue","title":"Constructor: <code>__init__(self, directory, queue)</code>","text":"<p>Initializes the <code>Watcher</code> instance.</p>"},{"location":"prerionid/datacrunch/#parameters","title":"Parameters:","text":"<ul> <li><code>directory</code> (str): Path to the directory to monitor.</li> <li><code>queue</code> (Queue): Queue to store files for processing.</li> </ul>"},{"location":"prerionid/datacrunch/#methods","title":"Methods:","text":"<ul> <li><code>run(self)</code>: Starts the directory monitoring process using <code>watchdog</code>.</li> </ul>"},{"location":"prerionid/datacrunch/#handler","title":"<code>Handler</code>","text":"<p>The <code>Handler</code> class extends <code>FileSystemEventHandler</code> to handle file system events.</p>"},{"location":"prerionid/datacrunch/#constructor-__init__self-queue","title":"Constructor: <code>__init__(self, queue)</code>","text":"<p>Initializes the <code>Handler</code> instance.</p>"},{"location":"prerionid/datacrunch/#parameters_1","title":"Parameters:","text":"<ul> <li><code>queue</code> (Queue): Queue to store files for processing.</li> </ul>"},{"location":"prerionid/datacrunch/#methods_1","title":"Methods:","text":"<ul> <li><code>on_created(self, event)</code>: Adds newly created <code>.tiq</code> files to the queue.</li> <li><code>on_modified(self, event)</code>: Adds modified <code>.tiq</code> files to the queue.</li> </ul>"},{"location":"prerionid/datacrunch/#functions","title":"Functions","text":""},{"location":"prerionid/datacrunch/#file-processing","title":"File Processing","text":""},{"location":"prerionid/datacrunch/#process_filefile_path-output_path-lframes-nframes-n_avg-zoom_center-www_path","title":"<code>process_file(file_path, output_path, lframes, nframes, n_avg, zoom_center, www_path='')</code>","text":"<p>Processes a single <code>.tiq</code> file to generate spectrograms and save results.</p>"},{"location":"prerionid/datacrunch/#parameters_2","title":"Parameters:","text":"<ul> <li><code>file_path</code> (str): Path to the <code>.tiq</code> file.</li> <li><code>output_path</code> (str): Directory to save processed files.</li> <li><code>lframes</code> (int): Length of each frame.</li> <li><code>nframes</code> (int): Number of frames to process.</li> <li><code>n_avg</code> (int): Number of frames to average.</li> <li><code>zoom_center</code> (float): Center frequency for zoomed spectrograms.</li> <li><code>www_path</code> (str, optional): Directory to copy files for web access.</li> </ul>"},{"location":"prerionid/datacrunch/#workertask_queue-processed_files-tracking_file_path-lframes-nframes-output_path-n_avg-zoom_center-www_path","title":"<code>worker(task_queue, processed_files, tracking_file_path, lframes, nframes, output_path, n_avg, zoom_center, www_path)</code>","text":"<p>Processes files from the queue in a separate thread.</p>"},{"location":"prerionid/datacrunch/#parameters_3","title":"Parameters:","text":"<ul> <li><code>task_queue</code> (Queue): Queue containing files to process.</li> <li><code>processed_files</code> (set): Set of already processed files.</li> <li><code>tracking_file_path</code> (str): Path to the TOML file tracking processed files.</li> <li><code>lframes</code> (int): Length of each frame.</li> <li><code>nframes</code> (int): Number of frames to process.</li> <li><code>output_path</code> (str): Directory to save processed files.</li> <li><code>n_avg</code> (int): Number of frames to average.</li> <li><code>zoom_center</code> (float): Center frequency for zoomed spectrograms.</li> <li><code>www_path</code> (str): Directory to copy files for web access.</li> </ul>"},{"location":"prerionid/datacrunch/#file-tracking","title":"File Tracking","text":""},{"location":"prerionid/datacrunch/#load_processed_filestracking_file_path","title":"<code>load_processed_files(tracking_file_path)</code>","text":"<p>Loads the list of processed files from a TOML file.</p>"},{"location":"prerionid/datacrunch/#parameters_4","title":"Parameters:","text":"<ul> <li><code>tracking_file_path</code> (str): Path to the TOML file.</li> </ul>"},{"location":"prerionid/datacrunch/#returns","title":"Returns:","text":"<ul> <li><code>set</code>: Set of processed files.</li> </ul>"},{"location":"prerionid/datacrunch/#save_processed_filesprocessed-tracking_file_path","title":"<code>save_processed_files(processed, tracking_file_path)</code>","text":"<p>Saves the list of processed files to a TOML file.</p>"},{"location":"prerionid/datacrunch/#parameters_5","title":"Parameters:","text":"<ul> <li><code>processed</code> (set): Set of processed files.</li> <li><code>tracking_file_path</code> (str): Path to the TOML file.</li> </ul>"},{"location":"prerionid/datacrunch/#spectrogram-plotting","title":"Spectrogram Plotting","text":""},{"location":"prerionid/datacrunch/#plot_and_save_spectrogramxx-yy-zz-filename-spannone","title":"<code>plot_and_save_spectrogram(xx, yy, zz, filename, span=None)</code>","text":"<p>Generates and saves a spectrogram plot.</p>"},{"location":"prerionid/datacrunch/#parameters_6","title":"Parameters:","text":"<ul> <li><code>xx</code> (array): Frequency data.</li> <li><code>yy</code> (array): Time data.</li> <li><code>zz</code> (array): Power data.</li> <li><code>filename</code> (str): Name of the output file.</li> <li><code>span</code> (float, optional): Frequency span for zoomed plots.</li> </ul>"},{"location":"prerionid/datacrunch/#average_spectrogramxx-yy-zz-n_avg","title":"<code>average_spectrogram(xx, yy, zz, n_avg)</code>","text":"<p>Averages the spectrogram data over a specified number of frames.</p>"},{"location":"prerionid/datacrunch/#parameters_7","title":"Parameters:","text":"<ul> <li><code>xx</code> (array): Frequency data.</li> <li><code>yy</code> (array): Time data.</li> <li><code>zz</code> (array): Power data.</li> <li><code>n_avg</code> (int): Number of frames to average.</li> </ul>"},{"location":"prerionid/datacrunch/#returns_1","title":"Returns:","text":"<ul> <li>Averaged spectrogram data.</li> </ul>"},{"location":"prerionid/datacrunch/#configuration","title":"Configuration","text":""},{"location":"prerionid/datacrunch/#load_config_fileconfigfile","title":"<code>load_config_file(configfile)</code>","text":"<p>Loads and validates a TOML configuration file.</p>"},{"location":"prerionid/datacrunch/#parameters_8","title":"Parameters:","text":"<ul> <li><code>configfile</code> (str): Path to the TOML configuration file.</li> </ul>"},{"location":"prerionid/datacrunch/#returns_2","title":"Returns:","text":"<ul> <li><code>dict</code>: Configuration dictionary.</li> </ul>"},{"location":"prerionid/datacrunch/#main-workflow","title":"Main Workflow","text":""},{"location":"prerionid/datacrunch/#mainfolder_path-tracking_file_path-num_threads-nframes-lframes-output_path-n_avg-zoom_center-www_path","title":"<code>main(folder_path, tracking_file_path, num_threads, nframes, lframes, output_path, n_avg, zoom_center, www_path)</code>","text":"<p>Main function to initialize and run the file processing workflow.</p>"},{"location":"prerionid/datacrunch/#parameters_9","title":"Parameters:","text":"<ul> <li><code>folder_path</code> (str): Directory to monitor for <code>.tiq</code> files.</li> <li><code>tracking_file_path</code> (str): Path to the TOML file tracking processed files.</li> <li><code>num_threads</code> (int): Number of threads for processing files.</li> <li><code>nframes</code> (int): Number of frames to process.</li> <li><code>lframes</code> (int): Length of each frame.</li> <li><code>output_path</code> (str): Directory to save processed files.</li> <li><code>n_avg</code> (int): Number of frames to average.</li> <li><code>zoom_center</code> (float): Center frequency for zoomed spectrograms.</li> <li><code>www_path</code> (str): Directory to copy files for web access.</li> </ul>"},{"location":"prerionid/datacrunch/#command-line-interface","title":"Command-Line Interface","text":"<p>The <code>datacrunch.py</code> module can be executed as a standalone script. It accepts the following command-line arguments:</p>"},{"location":"prerionid/datacrunch/#arguments","title":"Arguments:","text":"<ul> <li><code>--folder_path</code> (str): Path to the folder containing <code>.tiq</code> files.</li> <li><code>--tracking_file_path</code> (str): Path to the TOML file tracking processed files.</li> <li><code>--output_path</code> (str): Directory to save processed files.</li> <li><code>--www_path</code> (str): Directory to copy files for web access.</li> <li><code>--num_threads</code> (int): Number of threads to use for processing files.</li> <li><code>--lframes</code> (int): Length of each frame.</li> <li><code>--nframes</code> (int): Number of frames to process.</li> <li><code>--n_avg</code> (int): Number of frames to average.</li> <li><code>--zoom_center</code> (float): Center frequency for zoomed spectrograms.</li> <li><code>--config</code> (str): Path to the TOML configuration file.</li> </ul>"},{"location":"prerionid/datacrunch/#example-usage","title":"Example Usage:","text":"<p>```bash python datacrunch.py --config config.toml</p>"},{"location":"prerionid/e0018/","title":"E0018 Module","text":"<p>The <code>e0018.py</code> module processes multiple IQ files for Schottky signal analysis. It automates the workflow of reading files, generating spectrograms, saving processed data, and managing logs. The module supports multithreading for efficient processing.</p>"},{"location":"prerionid/e0018/#functions","title":"Functions","text":""},{"location":"prerionid/e0018/#plot_and_save_spectrogramxx-yy-zz-filename-spannone","title":"<code>plot_and_save_spectrogram(xx, yy, zz, filename, span=None)</code>","text":"<p>Generates and saves a spectrogram plot.</p>"},{"location":"prerionid/e0018/#parameters","title":"Parameters:","text":"<ul> <li><code>xx</code> (array): Frequency data.</li> <li><code>yy</code> (array): Time data.</li> <li><code>zz</code> (array): Power data.</li> <li><code>filename</code> (str): Name of the output file.</li> <li><code>span</code> (float, optional): Frequency span for zoomed plots.</li> </ul>"},{"location":"prerionid/e0018/#workflow","title":"Workflow:","text":"<ol> <li>Filters the frequency data based on the span.</li> <li>Plots the spectrogram using <code>matplotlib</code>.</li> <li>Saves the plot as a PNG file.</li> </ol>"},{"location":"prerionid/e0018/#process_loopsyncfile-logfile-lustrepath-queue","title":"<code>process_loop(syncfile, logfile, lustrepath, queue)</code>","text":"<p>Reads a sync file and enqueues files for processing.</p>"},{"location":"prerionid/e0018/#parameters_1","title":"Parameters:","text":"<ul> <li><code>syncfile</code> (str): Path to the sync file.</li> <li><code>logfile</code> (str): Path to the log file.</li> <li><code>lustrepath</code> (str): Directory containing the files to process.</li> <li><code>queue</code> (Queue): Queue to store files for processing.</li> </ul>"},{"location":"prerionid/e0018/#workflow_1","title":"Workflow:","text":"<ol> <li>Reads the sync file line by line.</li> <li>Checks if each file has already been processed.</li> <li>Enqueues unprocessed files for further processing.</li> </ol>"},{"location":"prerionid/e0018/#process_eachsource_fullfilename-basefilename-outpath-wwwpath-n_avg-lframes-nframes","title":"<code>process_each(source_fullfilename, basefilename, outpath, wwwpath, n_avg, lframes, nframes)</code>","text":"<p>Processes a single IQ file.</p>"},{"location":"prerionid/e0018/#parameters_2","title":"Parameters:","text":"<ul> <li><code>source_fullfilename</code> (str): Full path to the source file.</li> <li><code>basefilename</code> (str): Base name of the file.</li> <li><code>outpath</code> (str): Directory to save processed files.</li> <li><code>wwwpath</code> (str): Directory to copy files for web access.</li> <li><code>n_avg</code> (int): Number of frames to average.</li> <li><code>lframes</code> (int): Length of each frame.</li> <li><code>nframes</code> (int): Number of frames to process.</li> </ul>"},{"location":"prerionid/e0018/#workflow_2","title":"Workflow:","text":"<ol> <li>Reads the IQ file and computes the power spectrogram.</li> <li>Generates and saves spectrogram plots (full and zoomed).</li> <li>Saves processed data as <code>.npz</code> files.</li> <li>Copies files to the specified directories.</li> </ol>"},{"location":"prerionid/e0018/#put_into_logfilefile-logfilename","title":"<code>put_into_logfile(file, logfilename)</code>","text":"<p>Writes a file entry into the log file.</p>"},{"location":"prerionid/e0018/#parameters_3","title":"Parameters:","text":"<ul> <li><code>file</code> (str): File name to log.</li> <li><code>logfilename</code> (str): Path to the log file.</li> </ul>"},{"location":"prerionid/e0018/#already_processedcurrentfilename-logfilename","title":"<code>already_processed(currentfilename, logfilename)</code>","text":"<p>Checks if a file has already been processed.</p>"},{"location":"prerionid/e0018/#parameters_4","title":"Parameters:","text":"<ul> <li><code>currentfilename</code> (str): Name of the file to check.</li> <li><code>logfilename</code> (str): Path to the log file.</li> </ul>"},{"location":"prerionid/e0018/#returns","title":"Returns:","text":"<ul> <li><code>bool</code>: <code>True</code> if the file is already processed, <code>False</code> otherwise.</li> </ul>"},{"location":"prerionid/e0018/#workerqueue-outpath-wwwpath-n_avg-lframes-nframes","title":"<code>worker(queue, outpath, wwwpath, n_avg, lframes, nframes)</code>","text":"<p>Processes files from the queue in a separate thread.</p>"},{"location":"prerionid/e0018/#parameters_5","title":"Parameters:","text":"<ul> <li><code>queue</code> (Queue): Queue containing files to process.</li> <li><code>outpath</code> (str): Directory to save processed files.</li> <li><code>wwwpath</code> (str): Directory to copy files for web access.</li> <li><code>n_avg</code> (int): Number of frames to average.</li> <li><code>lframes</code> (int): Length of each frame.</li> <li><code>nframes</code> (int): Number of frames to process.</li> </ul>"},{"location":"prerionid/e0018/#main","title":"<code>main()</code>","text":"<p>Main function to initialize and run the file processing workflow.</p>"},{"location":"prerionid/e0018/#workflow_3","title":"Workflow:","text":"<ol> <li>Parses command-line arguments to load a TOML configuration file.</li> <li>Reads configuration settings for paths and processing parameters.</li> <li>Initializes a queue and starts worker threads for multithreaded processing.</li> <li>Continuously monitors the sync file for new files to process.</li> <li>Gracefully stops all threads on user interruption.</li> </ol>"},{"location":"prerionid/e0018/#command-line-interface","title":"Command-Line Interface","text":"<p>The <code>e0018.py</code> module can be executed as a standalone script. It accepts the following command-line arguments:</p>"},{"location":"prerionid/e0018/#arguments","title":"Arguments:","text":"<ul> <li><code>--config</code> (str, required): Path to the TOML configuration file.</li> </ul>"},{"location":"prerionid/e0018/#example-usage","title":"Example Usage:","text":"<p>```bash python e0018.py --config config.toml</p>"},{"location":"prerionid/psdata/","title":"Process Schottky Data Module","text":"<p>The <code>psdata.py</code> module defines the <code>ProcessSchottkyData</code> class, which is responsible for processing Schottky data. It provides methods for reading, analyzing, and saving power spectrogram data from IQ files.</p>"},{"location":"prerionid/psdata/#class","title":"Class","text":""},{"location":"prerionid/psdata/#processschottkydata","title":"<code>ProcessSchottkyData</code>","text":"<p>The <code>ProcessSchottkyData</code> class processes Schottky data from IQ files using various methods such as FFT, Welch, and multitaper methods.</p>"},{"location":"prerionid/psdata/#constructor-__init__self-filename-skip_timenone-analysis_timenone-binningnone-time_bin_sizenone-methodnpfft","title":"Constructor: <code>__init__(self, filename, skip_time=None, analysis_time=None, binning=None, time_bin_size=None, method='npfft')</code>","text":"<p>Initializes the <code>ProcessSchottkyData</code> instance.</p>"},{"location":"prerionid/psdata/#parameters","title":"Parameters:","text":"<ul> <li><code>filename</code> (str): Path to the IQ file.</li> <li><code>skip_time</code> (float, optional): Time to skip at the beginning of the file (in seconds).</li> <li><code>analysis_time</code> (float, optional): Duration of the data to analyze (in seconds).</li> <li><code>binning</code> (int, optional): Number of samples per bin.</li> <li><code>time_bin_size</code> (float, optional): Size of each time bin (in seconds).</li> <li><code>method</code> (str, optional): Method for processing the data. Options include:</li> <li><code>'npfft'</code>: Numpy FFT (default).</li> <li><code>'fftw'</code>: FFTW library.</li> <li><code>'welch'</code>: Welch's method.</li> <li><code>'mtm'</code>: Multitaper method.</li> </ul>"},{"location":"prerionid/psdata/#methods","title":"Methods","text":""},{"location":"prerionid/psdata/#data-processing","title":"Data Processing","text":""},{"location":"prerionid/psdata/#get_exp_dataself","title":"<code>get_exp_data(self)</code>","text":"<p>Reads and processes the experimental data from the IQ file.</p>"},{"location":"prerionid/psdata/#workflow","title":"Workflow:","text":"<ol> <li>Reads the IQ data:</li> <li>If <code>skip_time</code> and <code>analysis_time</code> are provided, reads a specific portion of the data.</li> <li>Otherwise, reads the entire file.</li> <li>Computes the power spectrogram using the specified method.</li> <li>Extracts the frequency and power data:</li> <li><code>freq</code>: Frequency data (adjusted for the center frequency).</li> <li><code>power</code>: Averaged power data.</li> </ol>"},{"location":"prerionid/psdata/#data-saving","title":"Data Saving","text":""},{"location":"prerionid/psdata/#save_exp_dataself-outdirnone","title":"<code>save_exp_data(self, outdir=None)</code>","text":"<p>Saves the processed frequency and power data to a <code>.npz</code> file.</p>"},{"location":"prerionid/psdata/#parameters_1","title":"Parameters:","text":"<ul> <li><code>outdir</code> (str, optional): Directory to save the output file. If not provided, saves the file in the same directory as the input file.</li> </ul>"},{"location":"prerionid/psdata/#workflow_1","title":"Workflow:","text":"<ol> <li>Generates a timestamped filename.</li> <li>Saves the frequency (<code>x</code>) and power (<code>y</code>) data to a <code>.npz</code> file.</li> </ol>"},{"location":"prerionid/psdata/#workflow_2","title":"Workflow","text":"<ol> <li>Initialization:</li> <li>The IQ file is loaded using the <code>iqtools</code> library.</li> <li> <p>Parameters such as binning and time ranges are configured.</p> </li> <li> <p>Data Processing:</p> </li> <li>Reads the IQ data and computes the power spectrogram.</li> <li> <p>Extracts and averages the power data over time.</p> </li> <li> <p>Data Saving:</p> </li> <li>Saves the processed data to a <code>.npz</code> file for further analysis.</li> </ol>"},{"location":"prerionid/psdata/#dependencies","title":"Dependencies","text":"<p>The <code>psdata.py</code> module relies on the following libraries: - iqtools: For reading and processing IQ files. - Numpy: For numerical operations. - Datetime: For generating timestamped filenames.</p>"},{"location":"prerionid/psdata/#example-usage","title":"Example Usage","text":""},{"location":"prerionid/psdata/#processing-schottky-data","title":"Processing Schottky Data:","text":"<pre><code>from prerionid.psdata import ProcessSchottkyData\n\n# Initialize the processor\nprocessor = ProcessSchottkyData(\n    filename=\"data.iq\",\n    skip_time=10,\n    analysis_time=60,\n    time_bin_size=0.1,\n    method=\"npfft\"\n)\n\n# Process the data\nprocessor.get_exp_data()\n\n# Save the processed data\nprocessor.save_exp_data(outdir=\"output\")\n</code></pre>"},{"location":"prerionid/watcher/","title":"Watcher Module","text":"<p>The <code>watcher.py</code> module provides functionality to monitor a directory for file system events such as file creation, deletion, modification, and movement. It uses the <code>watchdog</code> library to observe changes in real-time and logs these events using <code>loguru</code>.</p>"},{"location":"prerionid/watcher/#classes","title":"Classes","text":""},{"location":"prerionid/watcher/#watcher","title":"<code>Watcher</code>","text":"<p>The <code>Watcher</code> class is responsible for setting up and running the directory monitoring process.</p>"},{"location":"prerionid/watcher/#constructor-__init__self-directory","title":"Constructor: <code>__init__(self, directory)</code>","text":"<p>Initializes the <code>Watcher</code> instance.</p>"},{"location":"prerionid/watcher/#parameters","title":"Parameters:","text":"<ul> <li><code>directory</code> (str): The directory to monitor.</li> </ul>"},{"location":"prerionid/watcher/#methods","title":"Methods:","text":""},{"location":"prerionid/watcher/#runself","title":"<code>run(self)</code>","text":"<p>Starts the directory monitoring process.</p> <ul> <li>Creates an instance of the <code>Handler</code> class to handle file system events.</li> <li>Schedules the observer to monitor the specified directory recursively.</li> <li>Starts the observer and logs events until interrupted by the user.</li> </ul>"},{"location":"prerionid/watcher/#handler","title":"<code>Handler</code>","text":"<p>The <code>Handler</code> class extends <code>FileSystemEventHandler</code> and defines methods to handle specific file system events.</p>"},{"location":"prerionid/watcher/#methods_1","title":"Methods:","text":""},{"location":"prerionid/watcher/#on_createdself-event","title":"<code>on_created(self, event)</code>","text":"<p>Logs when a file is created.</p>"},{"location":"prerionid/watcher/#on_deletedself-event","title":"<code>on_deleted(self, event)</code>","text":"<p>Logs when a file is deleted.</p>"},{"location":"prerionid/watcher/#on_modifiedself-event","title":"<code>on_modified(self, event)</code>","text":"<p>Logs when a file is modified.</p>"},{"location":"prerionid/watcher/#on_movedself-event","title":"<code>on_moved(self, event)</code>","text":"<p>Logs when a file is moved.</p>"},{"location":"prerionid/watcher/#functions","title":"Functions","text":""},{"location":"prerionid/watcher/#count_filesfile","title":"<code>count_files(file)</code>","text":"<p>Logs the addition of a file.</p>"},{"location":"prerionid/watcher/#parameters_1","title":"Parameters:","text":"<ul> <li><code>file</code> (str): The name of the file added.</li> </ul>"},{"location":"prerionid/watcher/#maindirectory","title":"<code>main(directory)</code>","text":"<p>Starts the directory watcher.</p>"},{"location":"prerionid/watcher/#parameters_2","title":"Parameters:","text":"<ul> <li><code>directory</code> (str): The directory to monitor.</li> </ul>"},{"location":"prerionid/watcher/#command-line-interface","title":"Command-Line Interface","text":"<p>The <code>watcher.py</code> module can be executed as a standalone script to monitor a directory. It accepts the following command-line arguments:</p>"},{"location":"prerionid/watcher/#arguments","title":"Arguments:","text":"<ul> <li><code>--directory</code> (str, required): The directory to monitor.</li> </ul>"},{"location":"rionid/__main__/","title":"Main Module","text":"<p>The <code>__main__.py</code> module serves as the entry point for the RionID application. It provides a command-line interface (CLI) for running simulations and visualizing results. The module supports both batch processing and interactive visualization.</p>"},{"location":"rionid/__main__/#functions","title":"Functions","text":""},{"location":"rionid/__main__/#main","title":"<code>main()</code>","text":"<p>The <code>main()</code> function parses command-line arguments, validates inputs, and orchestrates the simulation and visualization workflow.</p>"},{"location":"rionid/__main__/#workflow","title":"Workflow:","text":"<ol> <li>Argument Parsing:</li> <li>Uses <code>argparse</code> to define and parse CLI arguments.</li> <li>Supports mutually exclusive modes (<code>brho</code>, <code>fref</code>, <code>kenergy</code>, <code>gamma</code>) for specifying the reference particle's properties.</li> <li>Input Validation:</li> <li>Ensures that at least one mode (<code>brho</code>, <code>fref</code>, <code>kenergy</code>, or <code>gamma</code>) is provided.</li> <li>Simulation Execution:</li> <li>Processes input files and runs simulations using the <code>controller</code> or <code>controller2</code> functions.</li> <li>Visualization:</li> <li>Displays results interactively or saves them to files, depending on the provided arguments.</li> </ol>"},{"location":"rionid/__main__/#controllerdata_file","title":"<code>controller(data_file, ...)</code>","text":"<p>Handles the simulation workflow for a single input file.</p>"},{"location":"rionid/__main__/#parameters","title":"Parameters:","text":"<ul> <li><code>data_file</code> (str): Path to the experimental data file.</li> <li><code>particles_to_simulate</code> (str): Path to the file containing particles to simulate.</li> <li><code>alphap</code> (float): Momentum compaction factor or gamma transition.</li> <li><code>ref_ion</code> (str): Reference ion in the format <code>AAXX+CC</code> (e.g., <code>72Ge+35</code>).</li> <li><code>ndivs</code> (int): Number of divisions in the display.</li> <li><code>amplitude</code> (int): Display scaling option.</li> <li><code>show</code> (bool): Whether to show the visualization.</li> <li><code>brho</code>, <code>fref</code>, <code>ke</code>, <code>gam</code> (float, optional): Reference particle properties.</li> <li><code>out</code> (str, optional): Output directory.</li> <li><code>harmonics</code> (list, optional): Harmonics to simulate.</li> <li><code>correct</code> (list, optional): Polynomial correction parameters.</li> <li><code>ods</code> (bool, optional): Whether to write results to an ODS file.</li> <li><code>nions</code> (int, optional): Number of ions to display.</li> </ul>"},{"location":"rionid/__main__/#workflow_1","title":"Workflow:","text":"<ol> <li>Loads experimental data using the <code>ImportData</code> class.</li> <li>Calculates mass-to-charge ratios (<code>moqs</code>) and simulated frequencies.</li> <li>Displays results interactively or saves them to files.</li> </ol>"},{"location":"rionid/__main__/#controller2data_file","title":"<code>controller2(data_file, ...)</code>","text":"<p>Similar to <code>controller</code>, but uses the <code>CreatePyGUI</code> class for visualization.</p>"},{"location":"rionid/__main__/#display_nionsnions","title":"<code>display_nions(nions, ...)</code>","text":"<p>Filters and displays the top <code>nions</code> ions based on their yield.</p>"},{"location":"rionid/__main__/#parameters_1","title":"Parameters:","text":"<ul> <li><code>nions</code> (int): Number of ions to display.</li> <li><code>yield_data</code> (array): Yield data for the ions.</li> <li><code>nuclei_names</code> (array): Names of the nuclei.</li> <li><code>simulated_data_dict</code> (dict): Simulated data for each harmonic.</li> <li><code>ref_ion</code> (str): Reference ion.</li> <li><code>harmonics</code> (list): Harmonics to simulate.</li> </ul>"},{"location":"rionid/__main__/#read_masterfilemaster_filename","title":"<code>read_masterfile(master_filename)</code>","text":"<p>Reads a list of filenames from a master file.</p>"},{"location":"rionid/__main__/#parameters_2","title":"Parameters:","text":"<ul> <li><code>master_filename</code> (str): Path to the master file.</li> </ul>"},{"location":"rionid/__main__/#returns","title":"Returns:","text":"<ul> <li><code>list</code>: List of filenames.</li> </ul>"},{"location":"rionid/__main__/#command-line-arguments","title":"Command-Line Arguments","text":"<p>The <code>__main__.py</code> module supports the following CLI arguments:</p>"},{"location":"rionid/__main__/#main-arguments","title":"Main Arguments:","text":"<ul> <li><code>datafile</code> (str): Name of the input file(s) with data.</li> <li><code>-ap</code>, <code>--alphap</code> (float): Momentum compaction factor or gamma transition.</li> <li><code>-r</code>, <code>--refion</code> (str): Reference ion (e.g., <code>72Ge+35</code>).</li> <li><code>-psim</code>, <code>--filep</code> (str): File containing particles to simulate.</li> <li><code>-hrm</code>, <code>--harmonics</code> (float): Harmonics to simulate.</li> </ul>"},{"location":"rionid/__main__/#secondary-arguments","title":"Secondary Arguments:","text":"<ul> <li><code>-n</code>, <code>--nions</code> (int): Number of ions to display, sorted by yield.</li> </ul>"},{"location":"rionid/__main__/#exclusive-mode-arguments","title":"Exclusive Mode Arguments:","text":"<ul> <li><code>-b</code>, <code>--brho</code> (float): Brho value of the reference nucleus.</li> <li><code>-ke</code>, <code>--kenergy</code> (float): Kinetic energy of the reference nucleus.</li> <li><code>-gam</code>, <code>--gamma</code> (float): Lorentz factor gamma of the reference particle.</li> <li><code>-f</code>, <code>--fref</code> (float): Revolution frequency of the reference particle.</li> </ul>"},{"location":"rionid/__main__/#visualization-arguments","title":"Visualization Arguments:","text":"<ul> <li><code>-d</code>, <code>--ndivs</code> (int): Number of divisions in the display.</li> <li><code>-am</code>, <code>--amplitude</code> (int): Display scaling option.</li> <li><code>-s</code>, <code>--show</code>: Show the display (default: save and close).</li> <li><code>-w</code>, <code>--ods</code>: Write results to an ODS file.</li> </ul>"},{"location":"rionid/__main__/#other-arguments","title":"Other Arguments:","text":"<ul> <li><code>-l</code>, <code>--log</code> (str): Logging level (<code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>CRITICAL</code>).</li> <li><code>-o</code>, <code>--outdir</code> (str): Output directory.</li> <li><code>-c</code>, <code>--correct</code> (list): Polynomial correction parameters.</li> </ul>"},{"location":"rionid/__main__/#example-usage","title":"Example Usage","text":""},{"location":"rionid/__main__/#run-a-simulation-with-visualization","title":"Run a Simulation with Visualization:","text":"<pre><code>python -m rionid --datafile input.dat -ap 0.5 -r 72Ge+35 -f 1e6 -s\n</code></pre>"},{"location":"rionid/creategui/","title":"CreateGUI Module","text":"<p>The <code>creategui.py</code> module defines the <code>CreateGUI</code> class, which is responsible for visualizing experimental and simulated data using ROOT histograms. It follows the Model-View-Controller (MVC) design pattern, where this class serves as the View.</p>"},{"location":"rionid/creategui/#class","title":"Class","text":""},{"location":"rionid/creategui/#creategui","title":"<code>CreateGUI</code>","text":"<p>The <code>CreateGUI</code> class provides methods to create, format, and display histograms for experimental and simulated data. It also supports saving the visualizations to files.</p>"},{"location":"rionid/creategui/#constructor-__init__self-ref_ion-ion_names-ndivs-yield_option-show","title":"Constructor: <code>__init__(self, ref_ion, ion_names, ndivs, yield_option, show)</code>","text":"<p>Initializes the <code>CreateGUI</code> instance.</p>"},{"location":"rionid/creategui/#parameters","title":"Parameters:","text":"<ul> <li><code>ref_ion</code> (str): The reference ion used in the simulation.</li> <li><code>ion_names</code> (list): List of ion names to display.</li> <li><code>ndivs</code> (int): Number of divisions for the histogram display.</li> <li><code>yield_option</code> (int): Determines how the yield is displayed (e.g., scaled or constant height).</li> <li><code>show</code> (bool): Whether to display the visualization interactively.</li> </ul>"},{"location":"rionid/creategui/#methods","title":"Methods","text":""},{"location":"rionid/creategui/#_viewself-exp_data-simulated_data_dict-filenamespectrum-out","title":"<code>_view(self, exp_data, simulated_data_dict, filename='Spectrum', out='')</code>","text":"<p>Main method to create and display the visualization.</p>"},{"location":"rionid/creategui/#workflow","title":"Workflow:","text":"<ol> <li>Creates ROOT canvases and histograms.</li> <li>Fills histograms with experimental and simulated data.</li> <li>Sets axis ranges and scales.</li> <li>Draws histograms and overlays simulated data on experimental data.</li> <li>Displays the visualization interactively or saves it to a file.</li> </ol>"},{"location":"rionid/creategui/#create_canvasself","title":"<code>create_canvas(self)</code>","text":"<p>Creates ROOT canvases for displaying histograms.</p>"},{"location":"rionid/creategui/#create_histogramsself-exp_data-simulated_data_dict-filename","title":"<code>create_histograms(self, exp_data, simulated_data_dict, filename)</code>","text":"<p>Creates histograms for experimental and simulated data.</p>"},{"location":"rionid/creategui/#parameters_1","title":"Parameters:","text":"<ul> <li><code>exp_data</code> (array): Experimental data.</li> <li><code>simulated_data_dict</code> (dict): Simulated data for each harmonic.</li> <li><code>filename</code> (str): Name of the histogram.</li> </ul>"},{"location":"rionid/creategui/#histogram_fillself","title":"<code>histogram_fill(self)</code>","text":"<p>Fills the histograms with data.</p>"},{"location":"rionid/creategui/#set_xrangesself","title":"<code>set_xranges(self)</code>","text":"<p>Divides the x-axis into ranges based on the number of divisions (<code>ndivs</code>).</p>"},{"location":"rionid/creategui/#set_yscalesself","title":"<code>set_yscales(self)</code>","text":"<p>Sets the y-axis scales for the histograms, including logarithmic scaling if applicable.</p>"},{"location":"rionid/creategui/#create_stackself-simulated_data_dict","title":"<code>create_stack(self, simulated_data_dict)</code>","text":"<p>Creates a stack of histograms for simulated data.</p>"},{"location":"rionid/creategui/#parameters_2","title":"Parameters:","text":"<ul> <li><code>simulated_data_dict</code> (dict): Simulated data for each harmonic.</li> </ul>"},{"location":"rionid/creategui/#draw_histogramsself","title":"<code>draw_histograms(self)</code>","text":"<p>Draws the histograms on the ROOT canvases and overlays simulated data on experimental data.</p>"},{"location":"rionid/creategui/#set_legendself-legend","title":"<code>set_legend(self, legend)</code>","text":"<p>Formats the legend for the visualization.</p>"},{"location":"rionid/creategui/#parameters_3","title":"Parameters:","text":"<ul> <li><code>legend</code> (TLegend): ROOT legend object.</li> </ul>"},{"location":"rionid/creategui/#histogram_formatself-histogram-color-name","title":"<code>histogram_format(self, histogram, color, name)</code>","text":"<p>Formats individual histograms.</p>"},{"location":"rionid/creategui/#parameters_4","title":"Parameters:","text":"<ul> <li><code>histogram</code> (TH1D/TH1F): ROOT histogram object.</li> <li><code>color</code> (int): Color for the histogram.</li> <li><code>name</code> (str): Name of the histogram.</li> </ul>"},{"location":"rionid/creategui/#create_labelsself-key-color","title":"<code>create_labels(self, key, color)</code>","text":"<p>Creates labels for peaks in the histograms.</p>"},{"location":"rionid/creategui/#parameters_5","title":"Parameters:","text":"<ul> <li><code>key</code> (str): Key identifying the histogram.</li> <li><code>color</code> (int): Color for the labels.</li> </ul>"},{"location":"rionid/creategui/#set_peaksself-key","title":"<code>set_peaks(self, key)</code>","text":"<p>Finds peaks in the histogram using the <code>FitPeaks</code> class.</p>"},{"location":"rionid/creategui/#parameters_6","title":"Parameters:","text":"<ul> <li><code>key</code> (str): Key identifying the histogram.</li> </ul>"},{"location":"rionid/creategui/#returns","title":"Returns:","text":"<ul> <li><code>list</code>: List of peak positions.</li> </ul>"},{"location":"rionid/creategui/#set_peak_labelsself-xpeaks-key-color","title":"<code>set_peak_labels(self, xpeaks, key, color)</code>","text":"<p>Adds labels to the peaks in the histogram.</p>"},{"location":"rionid/creategui/#parameters_7","title":"Parameters:","text":"<ul> <li><code>xpeaks</code> (list): List of peak positions.</li> <li><code>key</code> (str): Key identifying the histogram.</li> <li><code>color</code> (int): Color for the labels.</li> </ul>"},{"location":"rionid/creategui/#save_pdfself-name","title":"<code>save_pdf(self, name)</code>","text":"<p>Saves the visualization as a PDF file.</p>"},{"location":"rionid/creategui/#parameters_8","title":"Parameters:","text":"<ul> <li><code>name</code> (str): Name of the output file.</li> </ul>"},{"location":"rionid/creategui/#save_rootself-name","title":"<code>save_root(self, name)</code>","text":"<p>Saves the visualization as a ROOT file.</p>"},{"location":"rionid/creategui/#parameters_9","title":"Parameters:","text":"<ul> <li><code>name</code> (str): Name of the output file.</li> </ul>"},{"location":"rionid/creategui/#dependencies","title":"Dependencies","text":"<p>The <code>creategui.py</code> module relies on the following libraries and modules: - ROOT: For creating and managing histograms and canvases. - Numpy: For numerical operations. - Datetime: For timestamping output files. - Barion Modules:   - <code>patternfinder</code>: Provides the <code>PatternFinder</code> class for identifying patterns in data. - RionID Modules:   - <code>pypeaks</code>: Provides the <code>FitPeaks</code> class for peak fitting.</p>"},{"location":"rionid/creategui/#example-usage","title":"Example Usage","text":"<p>The <code>CreateGUI</code> class is typically used to visualize simulation results. Below is an example of how to use it:</p> <pre><code>from rionid.creategui import CreateGUI\n\n# Example data\nref_ion = \"72Ge+35\"\nion_names = [\"72Ge+35\", \"73Ge+35\", \"74Ge+35\"]\nndivs = 4\nyield_option = 1\nshow = True\n\n# Initialize the GUI\ngui = CreateGUI(ref_ion, ion_names, ndivs, yield_option, show)\n\n# Example experimental and simulated data\nexp_data = ...\nsimulated_data_dict = ...\n\n# Create and display the visualization\ngui._view(exp_data, simulated_data_dict, filename=\"Spectrum\", out=\"./output/\")\n</code></pre>"},{"location":"rionid/importdata/","title":"ImportData Module","text":"<p>The <code>importdata.py</code> module defines the <code>ImportData</code> class, which serves as the Model in the Model-View-Controller (MVC) design pattern. This class is responsible for handling experimental data, calculating mass-to-charge ratios, and simulating revolution frequencies for ions.</p>"},{"location":"rionid/importdata/#class","title":"Class","text":""},{"location":"rionid/importdata/#importdata","title":"<code>ImportData</code>","text":"<p>The <code>ImportData</code> class provides methods to load, process, and simulate experimental data for ion analysis.</p>"},{"location":"rionid/importdata/#constructor-__init__self-refion-alphap-filenamenone-reload_datanone-circumferencenone","title":"Constructor: <code>__init__(self, refion, alphap, filename=None, reload_data=None, circumference=None)</code>","text":"<p>Initializes the <code>ImportData</code> instance.</p>"},{"location":"rionid/importdata/#parameters","title":"Parameters:","text":"<ul> <li><code>refion</code> (str): Reference ion in the format <code>AAXX+CC</code> (e.g., <code>72Ge+35</code>).</li> <li><code>alphap</code> (float): Momentum compaction factor or gamma transition.</li> <li><code>filename</code> (str, optional): Path to the experimental data file.</li> <li><code>reload_data</code> (bool, optional): Whether to reload the experimental data.</li> <li><code>circumference</code> (float, optional): Circumference of the ring in meters.</li> </ul>"},{"location":"rionid/importdata/#methods","title":"Methods","text":""},{"location":"rionid/importdata/#data-handling","title":"Data Handling","text":""},{"location":"rionid/importdata/#_get_cache_file_pathself-filename","title":"<code>_get_cache_file_path(self, filename)</code>","text":"<p>Generates the path for the cached data file.</p>"},{"location":"rionid/importdata/#_get_experimental_dataself-filename","title":"<code>_get_experimental_data(self, filename)</code>","text":"<p>Loads experimental data from the specified file. Supports multiple file formats: - <code>.csv</code> - <code>.bin_fre</code>, <code>.bin_time</code>, <code>.bin_amp</code> - <code>.tdms</code> - <code>.xml</code> - <code>.Specan</code> - <code>.npz</code></p>"},{"location":"rionid/importdata/#_save_experimental_dataself","title":"<code>_save_experimental_data(self)</code>","text":"<p>Saves experimental data to a compressed <code>.npz</code> file.</p>"},{"location":"rionid/importdata/#_load_experimental_dataself","title":"<code>_load_experimental_data(self)</code>","text":"<p>Loads experimental data from a cached <code>.npz</code> file.</p>"},{"location":"rionid/importdata/#particle-simulation","title":"Particle Simulation","text":""},{"location":"rionid/importdata/#_set_particles_to_simulate_from_fileself-particles_to_simulate","title":"<code>_set_particles_to_simulate_from_file(self, particles_to_simulate)</code>","text":"<p>Loads particle data from a file using the <code>LISEreader</code> class.</p>"},{"location":"rionid/importdata/#_calculate_moqsself-particlesnone","title":"<code>_calculate_moqs(self, particles=None)</code>","text":"<p>Calculates the mass-to-charge ratios (<code>m/q</code>) for particles.</p>"},{"location":"rionid/importdata/#_calculate_srrfself-moqsnone-frefnone-brhonone-kenone-gamnone-correctnone","title":"<code>_calculate_srrf(self, moqs=None, fref=None, brho=None, ke=None, gam=None, correct=None)</code>","text":"<p>Calculates the simulated relative revolution frequencies (SRRF) for particles.</p>"},{"location":"rionid/importdata/#_simulated_dataself-harmonicsnone-particlesfalse-modenone","title":"<code>_simulated_data(self, harmonics=None, particles=False, mode=None)</code>","text":"<p>Simulates the expected measured frequencies and yields for each harmonic.</p>"},{"location":"rionid/importdata/#physics-calculations","title":"Physics Calculations","text":""},{"location":"rionid/importdata/#calculate_brho_relativisticself-moq-frequency-circumference-harmonic","title":"<code>calculate_brho_relativistic(self, moq, frequency, circumference, harmonic)</code>","text":"<p>Calculates the relativistic magnetic rigidity (<code>B\u03c1</code>) of an ion.</p>"},{"location":"rionid/importdata/#reference_frequencyself-frefnone-brhonone-kenone-gamnone","title":"<code>reference_frequency(self, fref=None, brho=None, ke=None, gam=None)</code>","text":"<p>Calculates the reference revolution frequency based on the provided parameters.</p>"},{"location":"rionid/importdata/#calc_ref_rev_frequencyref_mass-ring_circumference-brhonone-ref_chargenone-kenone-aanone-gamnone","title":"<code>calc_ref_rev_frequency(ref_mass, ring_circumference, brho=None, ref_charge=None, ke=None, aa=None, gam=None)</code>","text":"<p>Calculates the revolution frequency of the reference particle.</p>"},{"location":"rionid/importdata/#gamma_brhobrho-charge-mass","title":"<code>gamma_brho(brho, charge, mass)</code>","text":"<p>Calculates the Lorentz factor (<code>\u03b3</code>) from <code>B\u03c1</code>.</p>"},{"location":"rionid/importdata/#gamma_keke-aa-ref_mass","title":"<code>gamma_ke(ke, aa, ref_mass)</code>","text":"<p>Calculates the Lorentz factor (<code>\u03b3</code>) from kinetic energy.</p>"},{"location":"rionid/importdata/#betagamma","title":"<code>beta(gamma)</code>","text":"<p>Calculates the relativistic beta (<code>\u03b2</code>).</p>"},{"location":"rionid/importdata/#velocitybeta","title":"<code>velocity(beta)</code>","text":"<p>Calculates the velocity of the particle.</p>"},{"location":"rionid/importdata/#calc_revolution_frequencyvelocity-ring_circumference","title":"<code>calc_revolution_frequency(velocity, ring_circumference)</code>","text":"<p>Calculates the revolution frequency of the particle.</p>"},{"location":"rionid/importdata/#workflow","title":"Workflow","text":"<ol> <li>Data Loading:</li> <li>Experimental data is loaded from a file or cache.</li> <li> <p>Particle data is loaded using the <code>LISEreader</code> class.</p> </li> <li> <p>Mass-to-Charge Ratio Calculation:</p> </li> <li> <p>Calculates <code>m/q</code> for particles using the <code>AMEData</code> and <code>Particle</code> classes.</p> </li> <li> <p>Revolution Frequency Simulation:</p> </li> <li>Simulates the relative revolution frequencies (<code>SRRF</code>) for particles.</li> <li> <p>Applies optional polynomial corrections.</p> </li> <li> <p>Simulated Data Generation:</p> </li> <li>Generates simulated frequencies and yields for each harmonic.</li> </ol>"},{"location":"rionid/importdata/#dependencies","title":"Dependencies","text":"<p>The <code>importdata.py</code> module relies on the following libraries and modules: - Numpy: For numerical operations. - Barion Modules:   - <code>ring</code>: Provides the <code>Ring</code> class for ring properties.   - <code>amedata</code>: Provides the <code>AMEData</code> class for mass-energy conversions.   - <code>particle</code>: Provides the <code>Particle</code> class for particle properties. - LISEreader: For reading particle simulation files. - RionID Modules:   - <code>inouttools</code>: Provides utility functions for data input/output.</p>"},{"location":"rionid/importdata/#example-usage","title":"Example Usage","text":"<p>The <code>ImportData</code> class is typically used to process experimental data and simulate ion properties. Below is an example of how to use it:</p> <pre><code>from rionid.importdata import ImportData\n\n# Initialize the ImportData object\ndata = ImportData(\n    refion=\"72Ge+35\",\n    alphap=0.5,\n    filename=\"input.csv\",\n    reload_data=True,\n    circumference=100.0\n)\n\n# Load particles to simulate\ndata._set_particles_to_simulate_from_file(\"particles.lise\")\n\n# Calculate mass-to-charge ratios\ndata._calculate_moqs()\n\n# Simulate revolution frequencies\ndata._calculate_srrf(fref=1e6)\n\n# Generate simulated data for harmonics\ndata._simulated_data(harmonics=[1, 2, 3])\n</code></pre>"},{"location":"rionid/inputtools/","title":"InOutTools Module","text":"<p>The <code>inouttools.py</code> module provides utility functions for reading, processing, and writing experimental data in various formats. These tools are essential for handling input/output operations in the RionID application.</p>"},{"location":"rionid/inputtools/#functions","title":"Functions","text":""},{"location":"rionid/inputtools/#file-reading","title":"File Reading","text":""},{"location":"rionid/inputtools/#read_tdsm_binpath","title":"<code>read_tdsm_bin(path)</code>","text":"<p>Reads <code>.bin_fre</code>, <code>.bin_time</code>, and <code>.bin_amp</code> files and processes them into frequency, time, and amplitude arrays.</p>"},{"location":"rionid/inputtools/#parameters","title":"Parameters:","text":"<ul> <li><code>path</code> (str): Path to the <code>.bin_fre</code> file (other files must have the same base name).</li> </ul>"},{"location":"rionid/inputtools/#returns","title":"Returns:","text":"<ul> <li><code>frequency</code> (array): Frequency data.</li> <li><code>time</code> (array): Time data.</li> <li><code>amplitude</code> (array): Amplitude data.</li> </ul>"},{"location":"rionid/inputtools/#handle_read_tdsm_binpath","title":"<code>handle_read_tdsm_bin(path)</code>","text":"<p>Processes <code>.bin</code> files and returns frequency and averaged amplitude data.</p>"},{"location":"rionid/inputtools/#parameters_1","title":"Parameters:","text":"<ul> <li><code>path</code> (str): Path to the <code>.bin_fre</code> file.</li> </ul>"},{"location":"rionid/inputtools/#returns_1","title":"Returns:","text":"<ul> <li><code>frequency</code> (array): Frequency data.</li> <li><code>amplitude_avg</code> (array): Averaged amplitude data.</li> </ul>"},{"location":"rionid/inputtools/#handle_read_rsa_specan_xmlfilename","title":"<code>handle_read_rsa_specan_xml(filename)</code>","text":"<p>Reads and processes <code>.xml</code> files from RSA spectrum analyzers.</p>"},{"location":"rionid/inputtools/#parameters_2","title":"Parameters:","text":"<ul> <li><code>filename</code> (str): Path to the <code>.xml</code> file.</li> </ul>"},{"location":"rionid/inputtools/#returns_2","title":"Returns:","text":"<ul> <li><code>freq</code> (array): Frequency data.</li> <li><code>power</code> (array): Normalized power data.</li> </ul>"},{"location":"rionid/inputtools/#handle_read_rsa_data_csvfilename","title":"<code>handle_read_rsa_data_csv(filename)</code>","text":"<p>Reads and processes <code>.csv</code> files containing RSA data.</p>"},{"location":"rionid/inputtools/#parameters_3","title":"Parameters:","text":"<ul> <li><code>filename</code> (str): Path to the <code>.csv</code> file.</li> </ul>"},{"location":"rionid/inputtools/#returns_3","title":"Returns:","text":"<ul> <li><code>data</code> (array): Processed data.</li> </ul>"},{"location":"rionid/inputtools/#handle_read_rsa_result_csvfilename","title":"<code>handle_read_rsa_result_csv(filename)</code>","text":"<p>Reads and processes <code>.csv</code> files containing RSA results.</p>"},{"location":"rionid/inputtools/#parameters_4","title":"Parameters:","text":"<ul> <li><code>filename</code> (str): Path to the <code>.csv</code> file.</li> </ul>"},{"location":"rionid/inputtools/#returns_4","title":"Returns:","text":"<ul> <li><code>frequency</code> (array): Frequency data.</li> <li><code>amplitude</code> (array): Amplitude data.</li> </ul>"},{"location":"rionid/inputtools/#handle_tiqnpz_datafilename","title":"<code>handle_tiqnpz_data(filename)</code>","text":"<p>Processes <code>.npz</code> files containing TIQ data.</p>"},{"location":"rionid/inputtools/#parameters_5","title":"Parameters:","text":"<ul> <li><code>filename</code> (str): Path to the <code>.npz</code> file.</li> </ul>"},{"location":"rionid/inputtools/#returns_5","title":"Returns:","text":"<ul> <li><code>frequency</code> (array): Frequency data.</li> <li><code>amplitude_average</code> (array): Averaged amplitude data.</li> </ul>"},{"location":"rionid/inputtools/#handle_spectrumnpz_datafilename","title":"<code>handle_spectrumnpz_data(filename)</code>","text":"<p>Processes <code>.npz</code> files containing spectrum data.</p>"},{"location":"rionid/inputtools/#parameters_6","title":"Parameters:","text":"<ul> <li><code>filename</code> (str): Path to the <code>.npz</code> file.</li> </ul>"},{"location":"rionid/inputtools/#returns_6","title":"Returns:","text":"<ul> <li><code>frequency</code> (array): Frequency data.</li> <li><code>amplitude</code> (array): Amplitude data.</li> </ul>"},{"location":"rionid/inputtools/#handle_prerionidnpz_datafilename","title":"<code>handle_prerionidnpz_data(filename)</code>","text":"<p>Processes <code>.npz</code> files containing pre-RionID data.</p>"},{"location":"rionid/inputtools/#parameters_7","title":"Parameters:","text":"<ul> <li><code>filename</code> (str): Path to the <code>.npz</code> file.</li> </ul>"},{"location":"rionid/inputtools/#returns_7","title":"Returns:","text":"<ul> <li><code>frequency</code> (array): Frequency data.</li> <li><code>amplitude</code> (array): Amplitude data.</li> </ul>"},{"location":"rionid/inputtools/#read_psdatafilename-dbmfalse","title":"<code>read_psdata(filename, dbm=False)</code>","text":"<p>Reads <code>.psdata</code> files and extracts frequency and amplitude data.</p>"},{"location":"rionid/inputtools/#parameters_8","title":"Parameters:","text":"<ul> <li><code>filename</code> (str): Path to the <code>.psdata</code> file.</li> <li><code>dbm</code> (bool, optional): Whether to use dBm values for amplitude.</li> </ul>"},{"location":"rionid/inputtools/#returns_8","title":"Returns:","text":"<ul> <li><code>frequency</code> (array): Frequency data.</li> <li><code>amplitude</code> (array): Amplitude data.</li> </ul>"},{"location":"rionid/inputtools/#file-writing","title":"File Writing","text":""},{"location":"rionid/inputtools/#write_arrays_to_odsfile_name-sheet_name-names-arrays","title":"<code>write_arrays_to_ods(file_name, sheet_name, names, *arrays)</code>","text":"<p>Writes multiple arrays to an ODS spreadsheet.</p>"},{"location":"rionid/inputtools/#parameters_9","title":"Parameters:","text":"<ul> <li><code>file_name</code> (str): Name of the output ODS file.</li> <li><code>sheet_name</code> (str): Name of the sheet in the ODS file.</li> <li><code>names</code> (list): List of column names.</li> <li><code>*arrays</code> (list of arrays): Data arrays to write.</li> </ul>"},{"location":"rionid/inputtools/#workflow","title":"Workflow:","text":"<ol> <li>Creates a new ODS spreadsheet.</li> <li>Adds a sheet with the specified name.</li> <li>Writes column names and data arrays to the sheet.</li> <li>Saves the spreadsheet to the specified file.</li> </ol>"},{"location":"rionid/inputtools/#workflow_1","title":"Workflow","text":"<ol> <li>File Reading:</li> <li>Reads experimental data from various file formats (<code>.bin</code>, <code>.xml</code>, <code>.csv</code>, <code>.npz</code>, etc.).</li> <li> <p>Processes the data into frequency, amplitude, and other relevant arrays.</p> </li> <li> <p>Data Processing:</p> </li> <li>Normalizes power data.</li> <li> <p>Averages amplitude data across time.</p> </li> <li> <p>File Writing:</p> </li> <li>Exports processed data to ODS spreadsheets for further analysis.</li> </ol>"},{"location":"rionid/inputtools/#dependencies","title":"Dependencies","text":"<p>The <code>inouttools.py</code> module relies on the following libraries: - Numpy: For numerical operations. - iqtools: For reading RSA spectrum analyzer files. - ezodf: For writing ODS spreadsheets. - OS: For file path operations.</p>"},{"location":"rionid/inputtools/#example-usage","title":"Example Usage","text":""},{"location":"rionid/inputtools/#reading-bin-files","title":"Reading <code>.bin</code> Files:","text":"<pre><code>from rionid.inouttools import handle_read_tdsm_bin\n\nfrequency, amplitude_avg = handle_read_tdsm_bin(\"data.bin_fre\")\nprint(f\"Frequency: {frequency}\")\nprint(f\"Averaged Amplitude: {amplitude_avg}\")\n</code></pre>"},{"location":"rionid/pypeaks/","title":"PyPeaks Module","text":"<p>The <code>pypeaks.py</code> module provides tools for peak detection and fitting in histograms using ROOT. It includes the <code>FitPeaks</code> class for managing peak finding, background subtraction, and Gaussian fitting, as well as the <code>gaussians</code> function for calculating the sum of Gaussian functions.</p>"},{"location":"rionid/pypeaks/#functions","title":"Functions","text":""},{"location":"rionid/pypeaks/#gaussiansx-par","title":"<code>gaussians(x, par)</code>","text":"<p>Calculates the sum of Gaussian functions.</p>"},{"location":"rionid/pypeaks/#parameters","title":"Parameters:","text":"<ul> <li><code>x</code> (array-like): Input data.</li> <li><code>par</code> (array-like): Parameters for the Gaussian functions.</li> </ul>"},{"location":"rionid/pypeaks/#returns","title":"Returns:","text":"<ul> <li><code>result</code> (float): Sum of the Gaussian functions.</li> </ul>"},{"location":"rionid/pypeaks/#workflow","title":"Workflow:","text":"<ol> <li>Determines the number of peaks to fit based on the parameters.</li> <li>Calculates the linear part of the function.</li> <li>Adds the contribution of each Gaussian to the result.</li> </ol>"},{"location":"rionid/pypeaks/#class","title":"Class","text":""},{"location":"rionid/pypeaks/#fitpeaks","title":"<code>FitPeaks</code>","text":"<p>The <code>FitPeaks</code> class provides methods for peak detection, background subtraction, and Gaussian fitting in histograms.</p>"},{"location":"rionid/pypeaks/#constructor-__init__self-npeaks-histogram-tofit","title":"Constructor: <code>__init__(self, npeaks, histogram, tofit)</code>","text":"<p>Initializes the <code>FitPeaks</code> instance.</p>"},{"location":"rionid/pypeaks/#parameters_1","title":"Parameters:","text":"<ul> <li><code>npeaks</code> (int): Maximum number of peaks to detect.</li> <li><code>histogram</code> (TH1): ROOT histogram to analyze.</li> <li><code>tofit</code> (bool): Whether to perform Gaussian fitting.</li> </ul>"},{"location":"rionid/pypeaks/#methods","title":"Methods","text":""},{"location":"rionid/pypeaks/#peak-detection","title":"Peak Detection","text":""},{"location":"rionid/pypeaks/#peak_findingself","title":"<code>peak_finding(self)</code>","text":"<p>Uses <code>TSpectrum</code> to detect peaks in the histogram.</p>"},{"location":"rionid/pypeaks/#returns_1","title":"Returns:","text":"<ul> <li><code>xpeaks</code> (array): Positions of the detected peaks.</li> </ul>"},{"location":"rionid/pypeaks/#peak_finding_backgroundself","title":"<code>peak_finding_background(self)</code>","text":"<p>Detects peaks after subtracting the background.</p>"},{"location":"rionid/pypeaks/#returns_2","title":"Returns:","text":"<ul> <li><code>xpeaks</code> (array): Positions of the detected peaks.</li> </ul>"},{"location":"rionid/pypeaks/#peak_finding2histogram","title":"<code>peak_finding2(histogram)</code>","text":"<p>Performs high-resolution peak detection.</p>"},{"location":"rionid/pypeaks/#parameters_2","title":"Parameters:","text":"<ul> <li><code>histogram</code> (TH1): ROOT histogram to analyze.</li> </ul>"},{"location":"rionid/pypeaks/#returns_3","title":"Returns:","text":"<ul> <li><code>fPositionX</code> (array): X positions of the detected peaks.</li> <li><code>fPositionY</code> (array): Y positions of the detected peaks.</li> </ul>"},{"location":"rionid/pypeaks/#background-subtraction","title":"Background Subtraction","text":""},{"location":"rionid/pypeaks/#backgroundself","title":"<code>background(self)</code>","text":"<p>Estimates the background using <code>TSpectrum.Background</code> and a linear fit.</p>"},{"location":"rionid/pypeaks/#get_background_averagehistogram_list","title":"<code>get_background_average(histogram_list)</code>","text":"<p>Calculates the average background from a list of histograms.</p>"},{"location":"rionid/pypeaks/#parameters_3","title":"Parameters:","text":"<ul> <li><code>histogram_list</code> (list): List of ROOT histograms.</li> </ul>"},{"location":"rionid/pypeaks/#returns_4","title":"Returns:","text":"<ul> <li><code>hback</code> (TH1): Average background histogram.</li> </ul>"},{"location":"rionid/pypeaks/#peak-fitting","title":"Peak Fitting","text":""},{"location":"rionid/pypeaks/#n_peakstofitself","title":"<code>n_peakstofit(self)</code>","text":"<p>Determines the number of peaks to fit and initializes parameters for Gaussian fitting.</p>"},{"location":"rionid/pypeaks/#returns_5","title":"Returns:","text":"<ul> <li><code>n_peakstofit</code> (int): Number of peaks to fit.</li> </ul>"},{"location":"rionid/pypeaks/#peaks_infoself-npeaks","title":"<code>peaks_info(self, npeaks)</code>","text":"<p>Returns information about the detected peaks, sorted by height.</p>"},{"location":"rionid/pypeaks/#parameters_4","title":"Parameters:","text":"<ul> <li><code>npeaks</code> (int): Number of peaks to analyze.</li> </ul>"},{"location":"rionid/pypeaks/#returns_6","title":"Returns:","text":"<ul> <li><code>aux2</code> (array): Array of peak heights and positions.</li> </ul>"},{"location":"rionid/pypeaks/#gaussians_fittingself","title":"<code>gaussians_fitting(self)</code>","text":"<p>Performs Gaussian fitting on the histogram.</p>"},{"location":"rionid/pypeaks/#visualization","title":"Visualization","text":""},{"location":"rionid/pypeaks/#set_canvasself","title":"<code>set_canvas(self)</code>","text":"<p>Creates ROOT canvases for displaying histograms and fitting results.</p>"},{"location":"rionid/pypeaks/#set_rangesself","title":"<code>set_ranges(self)</code>","text":"<p>Sets the X-axis range for the histogram.</p>"},{"location":"rionid/pypeaks/#workflow_1","title":"Workflow","text":"<ol> <li>Peak Detection:</li> <li>Detects peaks in the histogram using <code>TSpectrum</code>.</li> <li> <p>Optionally subtracts the background before peak detection.</p> </li> <li> <p>Background Subtraction:</p> </li> <li>Estimates the background using <code>TSpectrum.Background</code>.</li> <li> <p>Optionally performs a linear fit to refine the background estimation.</p> </li> <li> <p>Gaussian Fitting:</p> </li> <li>Fits the detected peaks with Gaussian functions.</li> <li> <p>Iteratively refines the fit parameters.</p> </li> <li> <p>Visualization:</p> </li> <li>Displays the histogram, detected peaks, and fitted Gaussians on ROOT canvases.</li> </ol>"},{"location":"rionid/pypeaks/#dependencies","title":"Dependencies","text":"<p>The <code>pypeaks.py</code> module relies on the following libraries: - ROOT: For histogram manipulation, peak detection, and fitting. - Numpy: For numerical operations.</p>"},{"location":"rionid/pypeaks/#example-usage","title":"Example Usage","text":""},{"location":"rionid/pypeaks/#detecting-peaks","title":"Detecting Peaks:","text":"<pre><code>from rionid.pypeaks import FitPeaks\n\n# Example histogram\nhistogram = ...\n\n# Initialize the FitPeaks object\nfit_peaks = FitPeaks(npeaks=5, histogram=histogram, tofit=False)\n\n# Detect peaks\nxpeaks = fit_peaks.peak_finding()\nprint(f\"Detected peaks: {xpeaks}\")\n</code></pre>"},{"location":"rionid/pyqtgraphgui/","title":"PyQtGraph GUI Module","text":"<p>The <code>pyqtgraphgui.py</code> module defines the <code>CreatePyGUI</code> class, which provides a graphical interface for visualizing experimental and simulated data using PyQt5 and PyQtGraph. It serves as the View in the Model-View-Controller (MVC) design pattern.</p>"},{"location":"rionid/pyqtgraphgui/#class","title":"Class","text":""},{"location":"rionid/pyqtgraphgui/#createpygui","title":"<code>CreatePyGUI</code>","text":"<p>The <code>CreatePyGUI</code> class is a PyQt5-based GUI for visualizing Schottky signals. It uses PyQtGraph for plotting experimental and simulated data and provides interactive tools for data exploration.</p>"},{"location":"rionid/pyqtgraphgui/#constructor-__init__self","title":"Constructor: <code>__init__(self)</code>","text":"<p>Initializes the <code>CreatePyGUI</code> instance and sets up the user interface.</p>"},{"location":"rionid/pyqtgraphgui/#methods","title":"Methods","text":""},{"location":"rionid/pyqtgraphgui/#user-interface","title":"User Interface","text":""},{"location":"rionid/pyqtgraphgui/#setup_uiself","title":"<code>setup_ui(self)</code>","text":"<p>Sets up the main user interface, including the plot widget, labels, and control buttons.</p>"},{"location":"rionid/pyqtgraphgui/#data-visualization","title":"Data Visualization","text":""},{"location":"rionid/pyqtgraphgui/#plot_all_dataself-data","title":"<code>plot_all_data(self, data)</code>","text":"<p>Plots both experimental and simulated data.</p>"},{"location":"rionid/pyqtgraphgui/#parameters","title":"Parameters:","text":"<ul> <li><code>data</code>: Data object containing experimental and simulated data.</li> </ul>"},{"location":"rionid/pyqtgraphgui/#plot_experimental_dataself-data","title":"<code>plot_experimental_data(self, data)</code>","text":"<p>Plots the experimental data on the graph.</p>"},{"location":"rionid/pyqtgraphgui/#parameters_1","title":"Parameters:","text":"<ul> <li><code>data</code>: Data object containing experimental data.</li> </ul>"},{"location":"rionid/pyqtgraphgui/#plot_simulated_dataself-data","title":"<code>plot_simulated_data(self, data)</code>","text":"<p>Plots the simulated data on the graph, including vertical lines and labels for harmonics.</p>"},{"location":"rionid/pyqtgraphgui/#parameters_2","title":"Parameters:","text":"<ul> <li><code>data</code>: Data object containing simulated data.</li> </ul>"},{"location":"rionid/pyqtgraphgui/#updatedataself-data","title":"<code>updateData(self, data)</code>","text":"<p>Updates the visualization with new data.</p>"},{"location":"rionid/pyqtgraphgui/#parameters_3","title":"Parameters:","text":"<ul> <li><code>data</code>: Data object containing experimental and simulated data.</li> </ul>"},{"location":"rionid/pyqtgraphgui/#data-clearing","title":"Data Clearing","text":""},{"location":"rionid/pyqtgraphgui/#clear_simulated_dataself","title":"<code>clear_simulated_data(self)</code>","text":"<p>Clears all simulated data from the plot.</p>"},{"location":"rionid/pyqtgraphgui/#clear_experimental_dataself","title":"<code>clear_experimental_data(self)</code>","text":"<p>Clears all experimental data from the plot.</p>"},{"location":"rionid/pyqtgraphgui/#data-interaction","title":"Data Interaction","text":""},{"location":"rionid/pyqtgraphgui/#toggle_simulated_dataself","title":"<code>toggle_simulated_data(self)</code>","text":"<p>Toggles the visibility of simulated data on the plot.</p>"},{"location":"rionid/pyqtgraphgui/#mouse_movedself-evt","title":"<code>mouse_moved(self, evt)</code>","text":"<p>Tracks the mouse position on the plot and displays the cursor coordinates.</p>"},{"location":"rionid/pyqtgraphgui/#parameters_4","title":"Parameters:","text":"<ul> <li><code>evt</code>: Mouse event.</li> </ul>"},{"location":"rionid/pyqtgraphgui/#save_selected_dataself","title":"<code>save_selected_data(self)</code>","text":"<p>Saves the data within the currently selected range on the plot to a <code>.npz</code> file.</p>"},{"location":"rionid/pyqtgraphgui/#reset_viewself","title":"<code>reset_view(self)</code>","text":"<p>Resets the plot view to the original X and Y ranges.</p>"},{"location":"rionid/pyqtgraphgui/#buttons-and-controls","title":"Buttons and Controls","text":""},{"location":"rionid/pyqtgraphgui/#add_buttonsself-main_layout","title":"<code>add_buttons(self, main_layout)</code>","text":"<p>Adds control buttons to the GUI, including: - Toggle Simulated Data: Toggles the visibility of simulated data. - Save Selected Data: Saves the currently selected data range. - Zoom In/Out: Zooms in or out on the plot. - Reset View: Resets the plot to its original view.</p>"},{"location":"rionid/pyqtgraphgui/#features","title":"Features","text":""},{"location":"rionid/pyqtgraphgui/#plot-customization","title":"Plot Customization","text":"<ul> <li>Logarithmic Y-Axis: Enables logarithmic scaling for the Y-axis.</li> <li>Custom Labels: Adds axis labels and adjusts font sizes for better readability.</li> <li>Legend: Displays a legend for experimental and simulated data.</li> </ul>"},{"location":"rionid/pyqtgraphgui/#interactive-tools","title":"Interactive Tools","text":"<ul> <li>Mouse Tracking: Displays the cursor position on the plot.</li> <li>Zoom and Pan: Allows zooming and panning on the plot.</li> <li>Data Saving: Saves selected data to a file for further analysis.</li> </ul>"},{"location":"rionid/pyqtgraphgui/#dependencies","title":"Dependencies","text":"<p>The <code>pyqtgraphgui.py</code> module relies on the following libraries: - PyQt5: For creating the graphical user interface. - PyQtGraph: For plotting and visualizing data. - Numpy: For numerical operations.</p>"},{"location":"rionid/pyqtgraphgui/#example-usage","title":"Example Usage","text":""},{"location":"rionid/pyqtgraphgui/#running-the-gui","title":"Running the GUI:","text":"<pre><code>from PyQt5.QtWidgets import QApplication\nfrom rionid.pyqtgraphgui import CreatePyGUI\nimport sys\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    gui = CreatePyGUI()\n    gui.show()\n    sys.exit(app.exec_())\n\n# Example data\nexperimental_data = {\n    \"experimental_data\": [np.array([1, 2, 3]), np.array([10, 20, 30])]\n}\nsimulated_data = {\n    \"simulated_data_dict\": {\n        \"1.0\": [[\"241.1\", \"0.5\", \"80Kr+35\"], [\"242.7\", \"0.4\", \"79Br+35\"]]\n    }\n}\n\n# Update the GUI with data\ngui.updateData(experimental_data)\ngui.plot_simulated_data(simulated_data)\n</code></pre>"},{"location":"rionidgui/__main__/","title":"Main Module","text":"<p>The <code>__main__.py</code> module serves as the entry point for the RionID+ application. It initializes the PyQt5 application and launches the main window.</p>"},{"location":"rionidgui/__main__/#function","title":"Function","text":""},{"location":"rionidgui/__main__/#main","title":"<code>main()</code>","text":"<p>The <code>main()</code> function initializes the application and displays the main GUI window.</p>"},{"location":"rionidgui/__main__/#workflow","title":"Workflow:","text":"<ol> <li>Creates a <code>QApplication</code> instance.</li> <li>Instantiates the <code>MainWindow</code> class from the <code>gui.py</code> module.</li> <li>Displays the main window using <code>show()</code>.</li> <li>Starts the PyQt5 event loop using <code>app.exec_()</code>.</li> </ol>"},{"location":"rionidgui/__main__/#example-usage","title":"Example Usage","text":"<p>The <code>__main__.py</code> module is executed directly to start the application. Below is an example of how it works:</p> <pre><code>python -m rionidgui\n</code></pre>"},{"location":"rionidgui/gui/","title":"GUI Module","text":"<p>The <code>gui.py</code> module defines the main graphical user interface (GUI) for the RionID+ application. It uses PyQt5 to create a split-panel interface for input and visualization.</p>"},{"location":"rionidgui/gui/#classes","title":"Classes","text":""},{"location":"rionidgui/gui/#mainwindow","title":"<code>MainWindow</code>","text":"<p>The <code>MainWindow</code> class is the main window of the application. It provides a split-panel layout with an input panel on the left and a visualization panel on the right.</p>"},{"location":"rionidgui/gui/#constructor-__init__self","title":"Constructor: <code>__init__(self)</code>","text":"<p>Initializes the main window and its components.</p>"},{"location":"rionidgui/gui/#key-features","title":"Key Features:","text":"<ul> <li>Window Title: Sets the title to \"RionID+\".</li> <li>Dynamic Sizing: Automatically adjusts the window size to fit the screen dimensions.</li> <li>Splitter Layout: Divides the window into two panels:</li> <li>Left Panel: Contains the input widget (<code>RionID_GUI</code>).</li> <li>Right Panel: Contains the visualization widget (<code>CreatePyGUI</code>).</li> </ul>"},{"location":"rionidgui/gui/#signals","title":"Signals:","text":"<ul> <li>Connects the <code>visualization_signal</code> from the <code>RionID_GUI</code> input panel to the <code>update_visualization</code> method to dynamically update the visualization panel.</li> </ul>"},{"location":"rionidgui/gui/#update_visualizationself-data","title":"<code>update_visualization(self, data)</code>","text":"<p>Updates the visualization panel with new data.</p>"},{"location":"rionidgui/gui/#parameters","title":"Parameters:","text":"<ul> <li><code>data</code>: The data to be visualized, passed from the input panel.</li> </ul>"},{"location":"rionidgui/gui/#workflow","title":"Workflow:","text":"<ol> <li>Receives the data from the <code>RionID_GUI</code> input panel.</li> <li>Calls the <code>updateData</code> method of the <code>CreatePyGUI</code> visualization widget to refresh the displayed content.</li> </ol>"},{"location":"rionidgui/gui/#dependencies","title":"Dependencies","text":"<p>The <code>gui.py</code> module relies on the following libraries and modules: - PyQt5: Provides the GUI framework.   - Widgets: <code>QApplication</code>, <code>QWidget</code>, <code>QSplitter</code>, etc.   - Core: <code>Qt</code>, <code>pyqtSignal</code>, etc. - Loguru: For logging. - Numpy: For numerical operations. - RionID Modules:   - <code>rionid.importdata</code>: Handles data import and processing.   - <code>rionid.pyqtgraphgui</code>: Provides the visualization widget (<code>CreatePyGUI</code>).   - <code>rionidgui.parameter_gui</code>: Provides the input widget (<code>RionID_GUI</code>). - Barion Module:   - <code>barion.amedata</code>: Handles mass-energy conversions.</p>"},{"location":"rionidgui/gui/#example-usage","title":"Example Usage","text":"<p>The <code>MainWindow</code> class is typically instantiated and executed as part of the main application. Below is an example of how to use it:</p> <pre><code>import sys\nfrom PyQt5.QtWidgets import QApplication\nfrom rionidgui.gui import MainWindow\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    main_window = MainWindow()\n    main_window.show()\n    sys.exit(app.exec_())\n</code></pre>"},{"location":"rionidgui/gui_controller/","title":"GUI Controller","text":"<p>The <code>gui_controller.py</code> module is responsible for handling the simulation workflow in the Rionid GUI. It provides functions to process input data, perform calculations, and save simulation results.</p>"},{"location":"rionidgui/gui_controller/#functions","title":"Functions","text":""},{"location":"rionidgui/gui_controller/#import_controller","title":"<code>import_controller</code>","text":"<p>This is the main function that orchestrates the simulation process.</p>"},{"location":"rionidgui/gui_controller/#parameters","title":"Parameters:","text":"<ul> <li><code>datafile</code> (str, optional): Path to the input data file.</li> <li><code>filep</code> (str, optional): Path to the particle simulation file.</li> <li><code>alphap</code> (float, optional): Alpha parameter for calculations.</li> <li><code>refion</code> (str, optional): Reference ion for the simulation.</li> <li><code>harmonics</code> (str, optional): Space-separated harmonic numbers.</li> <li><code>nions</code> (int, optional): Number of ions to display in the output.</li> <li><code>amplitude</code> (float, optional): Amplitude for calculations (currently unused).</li> <li><code>circumference</code> (float, optional): Circumference of the accelerator.</li> <li><code>mode</code> (str, optional): Mode of operation (<code>'Frequency'</code>, <code>'B\u03c1'</code>, <code>'Kinetic Energy'</code>, or <code>'Gamma'</code>).</li> <li><code>value</code> (float, optional): Value corresponding to the selected mode.</li> <li><code>reload_data</code> (bool, optional): Whether to reload the input data.</li> </ul>"},{"location":"rionidgui/gui_controller/#returns","title":"Returns:","text":"<ul> <li><code>ImportData</code> object containing the simulated spectrum data, or <code>None</code> if an error occurs.</li> </ul>"},{"location":"rionidgui/gui_controller/#workflow","title":"Workflow:","text":"<ol> <li>Initializes parameters based on the input.</li> <li>Uses the <code>ImportData</code> class to process the input data and perform calculations.</li> <li>Simulates data for the specified harmonics.</li> <li>Displays the top <code>nions</code> ions using the <code>display_nions</code> function.</li> <li>Saves the simulation results to a file using the <code>save_simulation_results</code> function.</li> </ol>"},{"location":"rionidgui/gui_controller/#display_nions","title":"<code>display_nions</code>","text":"<p>Displays the top <code>nions</code> ions based on their yield data.</p>"},{"location":"rionidgui/gui_controller/#parameters_1","title":"Parameters:","text":"<ul> <li><code>nions</code> (int): Number of ions to display.</li> <li><code>yield_data</code> (array): Yield data for the ions.</li> <li><code>nuclei_names</code> (array): Names of the nuclei.</li> <li><code>simulated_data_dict</code> (dict): Dictionary containing simulated data for each harmonic.</li> <li><code>ref_ion</code> (str): Reference ion for the simulation.</li> <li><code>harmonics</code> (list): List of harmonic numbers.</li> </ul>"},{"location":"rionidgui/gui_controller/#save_simulation_results","title":"<code>save_simulation_results</code>","text":"<p>Saves the simulation results to a file.</p>"},{"location":"rionidgui/gui_controller/#parameters_2","title":"Parameters:","text":"<ul> <li><code>mydata</code> (<code>ImportData</code>): Object containing the simulation data.</li> <li><code>harmonics</code> (list): List of harmonic numbers.</li> <li><code>sort_index</code> (list): Indices of the sorted simulation results.</li> <li><code>filename</code> (str, optional): Name of the output file (default: <code>'simulation_result.out'</code>).</li> </ul>"},{"location":"rionidgui/gui_controller/#output","title":"Output:","text":"<ul> <li>Saves the results in a structured format, including ion names, frequencies, yields, mass-to-charge ratios, and masses.</li> </ul>"},{"location":"rionidgui/gui_controller/#example-usage","title":"Example Usage","text":"<pre><code>from rionidgui.gui_controller import import_controller\n\nresult = import_controller(\n    datafile=\"input.dat\",\n    filep=\"particles.dat\",\n    alphap=0.5,\n    refion=\"C12\",\n    harmonics=\"1 2 3\",\n    nions=5,\n    circumference=100.0,\n    mode=\"Frequency\",\n    value=1e6,\n    reload_data=True\n)\n</code></pre>"},{"location":"rionidgui/parameter_gui/","title":"Parameter GUI Module","text":"<p>The <code>parameter_gui.py</code> module defines the <code>RionID_GUI</code> class, which provides the user interface for configuring simulation parameters in the RionID+ application. It also includes the <code>CollapsibleGroupBox</code> class for organizing optional features in a collapsible layout.</p>"},{"location":"rionidgui/parameter_gui/#classes","title":"Classes","text":""},{"location":"rionidgui/parameter_gui/#rionid_gui","title":"<code>RionID_GUI</code>","text":"<p>The <code>RionID_GUI</code> class is a PyQt5 widget that allows users to input and configure simulation parameters. It includes features for saving and loading parameters, browsing files, and running the simulation.</p>"},{"location":"rionidgui/parameter_gui/#signals","title":"Signals:","text":"<ul> <li><code>visualization_signal</code>: Emitted when the simulation is complete, passing the resulting data to the visualization panel.</li> </ul>"},{"location":"rionidgui/parameter_gui/#constructor-__init__self","title":"Constructor: <code>__init__(self)</code>","text":"<p>Initializes the GUI and loads cached parameters from a TOML file.</p>"},{"location":"rionidgui/parameter_gui/#methods","title":"Methods:","text":""},{"location":"rionidgui/parameter_gui/#inituiself","title":"<code>initUI(self)</code>","text":"<p>Initializes the user interface by setting up the layout and loading parameters.</p>"},{"location":"rionidgui/parameter_gui/#load_parametersself-filepathparameters_cachetoml","title":"<code>load_parameters(self, filepath='parameters_cache.toml')</code>","text":"<p>Loads previously saved parameters from a TOML file.</p>"},{"location":"rionidgui/parameter_gui/#save_parametersself-filepathparameters_cachetoml","title":"<code>save_parameters(self, filepath='parameters_cache.toml')</code>","text":"<p>Saves the current parameters to a TOML file for future use.</p>"},{"location":"rionidgui/parameter_gui/#setup_layoutself","title":"<code>setup_layout(self)</code>","text":"<p>Sets up the main layout of the GUI, including file selection, parameter input, and control buttons.</p>"},{"location":"rionidgui/parameter_gui/#setup_file_selectionself","title":"<code>setup_file_selection(self)</code>","text":"<p>Creates the file selection section for browsing and selecting input files.</p>"},{"location":"rionidgui/parameter_gui/#setup_parametersself","title":"<code>setup_parameters(self)</code>","text":"<p>Creates the parameter input section, including fields for: - Alpha or Gamma (<code>alphap</code>) - Harmonics - Reference Ion - Mode and Value - Circumference - Number of Ions - Second-Order Correction</p>"},{"location":"rionidgui/parameter_gui/#setup_controlsself","title":"<code>setup_controls(self)</code>","text":"<p>Creates the control buttons for running the simulation and exiting the application.</p>"},{"location":"rionidgui/parameter_gui/#browse_datafileself","title":"<code>browse_datafile(self)</code>","text":"<p>Opens a file dialog to select the experimental data file.</p>"},{"location":"rionidgui/parameter_gui/#browse_lppfileself","title":"<code>browse_lppfile(self)</code>","text":"<p>Opens a file dialog to select the <code>.lpp</code> file.</p>"},{"location":"rionidgui/parameter_gui/#run_scriptself","title":"<code>run_script(self)</code>","text":"<p>Executes the simulation by calling the <code>import_controller</code> function with the configured parameters. Emits the <code>visualization_signal</code> with the resulting data.</p>"},{"location":"rionidgui/parameter_gui/#collapsiblegroupbox","title":"<code>CollapsibleGroupBox</code>","text":"<p>The <code>CollapsibleGroupBox</code> class provides a collapsible container for organizing optional features in the GUI.</p>"},{"location":"rionidgui/parameter_gui/#constructor-__init__self-title-parentnone","title":"Constructor: <code>__init__(self, title=\"\", parent=None)</code>","text":"<p>Initializes the collapsible group box with a toggle button and a content area.</p>"},{"location":"rionidgui/parameter_gui/#methods_1","title":"Methods:","text":"<ul> <li><code>on_pressed(self)</code>: Toggles the visibility of the content area.</li> <li><code>addWidget(self, widget)</code>: Adds a widget to the content area.</li> </ul>"},{"location":"rionidgui/parameter_gui/#gui-layout","title":"GUI Layout","text":""},{"location":"rionidgui/parameter_gui/#file-selection","title":"File Selection","text":"<ul> <li>Experimental Data File: Browse and select the experimental data file.</li> <li>.lpp File: Browse and select the <code>.lpp</code> file.</li> </ul>"},{"location":"rionidgui/parameter_gui/#parameter-input","title":"Parameter Input","text":"<ul> <li>Alpha or Gamma (<code>alphap</code>): Input field for the alpha or gamma parameter.</li> <li>Harmonics: Input field for harmonic numbers.</li> <li>Reference Ion: Input field for the reference ion.</li> <li>Mode and Value: Dropdown for selecting the mode (<code>Frequency</code>, <code>B\u03c1</code>, <code>Kinetic Energy</code>) and input field for the corresponding value.</li> <li>Circumference: Input field for the circumference of the accelerator.</li> <li>Number of Ions: Input field for the number of ions to display.</li> <li>Second-Order Correction: Input field for specifying a correction formula.</li> </ul>"},{"location":"rionidgui/parameter_gui/#controls","title":"Controls","text":"<ul> <li>Run Button: Executes the simulation with the configured parameters.</li> <li>Exit Button: Closes the application.</li> </ul>"},{"location":"rionidgui/parameter_gui/#example-usage","title":"Example Usage","text":"<p>The <code>RionID_GUI</code> class is typically used as part of the main application. Below is an example of how to integrate it:</p> <pre><code>from PyQt5.QtWidgets import QApplication\nfrom rionidgui.parameter_gui import RionID_GUI\n\nif __name__ == \"__main__\":\n    app = QApplication([])\n    gui = RionID_GUI()\n    gui.show()\n    app.exec_()\n</code></pre>"}]}